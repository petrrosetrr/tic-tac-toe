{"version":3,"sources":["components/StartPage/StartPage.module.css","components/Game/Game.module.css","components/StartPage/StartPage.js","components/Game/Game.js","components/App/App.js","index.js"],"names":["module","exports","StartPage","useState","value","setValue","className","s","title","fieldSize","type","min","max","onChange","e","target","startBtn","to","pathname","hash","width","height","viewBox","fill","xmlns","d","Game","useLocation","substring","Number","parseInt","sketch","p5","fontBold","cellSize","fieldWidth","map","fieldLeftTop","Array","score","initMap","i","push","drawField","maxWidth","windowWidth","windowHeight","Math","floor","getCellSize","noStroke","x","rect","y","pop","drawO","stroke","strokeWeight","noFill","circle","checkWinner","tmp","winner","checkLine","line","every","elem","X","O","forEach","j","length","console","log","getEmpty","flat","filter","cell","preload","loadFont","setup","createCanvas","draw","background","rectMode","CENTER","angleMode","DEGREES","translate","rotate","drawMap","textSize","textFont","text","tie","windowResized","resizeCanvas","mouseClicked","mouseX","mouseY","mapX","mapY","randomIndex","random","counter","nextTurn","link","App","basename","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf77d7cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"StartPage\":\"StartPage_StartPage__1IGBm\",\"fieldSize\":\"StartPage_fieldSize__JK1FO\",\"title\":\"StartPage_title__2uOhi\",\"text-shadow\":\"StartPage_text-shadow__1aeI_\",\"pseudo-shadow\":\"StartPage_pseudo-shadow__11F-p\",\"startBtn\":\"StartPage_startBtn__bT0hX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Game_link__1FqIl\"};","import React, {useState} from 'react';\nimport {Link} from \"react-router-dom\";\nimport s from './StartPage.module.css';\n\nconst StartPage = () => {\n    const [value, setValue] = useState('3');\n\n    return (\n        <section className={s.StartPage}>\n            <h1 className={s.title}>Tic-tac-toe</h1>\n            <label className={s.fieldSize}>\n                Choose filed size between 3 - 12:\n                <input\n                    type=\"number\"\n                    min={3}\n                    max={12}\n                    value={value}\n                    onChange={(e)=> {\n                        setValue(e.target.value);\n                    }}\n                />\n            </label>\n            <Link\n                className={s.startBtn}\n                to={{\n                    pathname: 'game',\n                    hash: `${value}`,\n                }}\n            >\n                <svg width=\"19\" height=\"23\" viewBox=\"0 0 19 23\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M2.8123 22.0464C2.55585 22.0465 2.30188 21.996 2.06493 21.8979C1.82797 21.7998 1.61266 21.656 1.43131 21.4747C1.24995 21.2933 1.10609 21.078 1.00796 20.8411C0.909826 20.6042 0.859337 20.3502 0.859375 20.0937V2.9082C0.859375 2.56121 0.951815 2.22049 1.12718 1.92108C1.30255 1.62167 1.55452 1.37439 1.85717 1.20467C2.15981 1.03495 2.50221 0.948914 2.84913 0.955422C3.19606 0.96193 3.53499 1.06074 3.83105 1.2417L17.8912 9.83437C18.1767 10.0088 18.4125 10.2537 18.5762 10.5455C18.7398 10.8374 18.8258 11.1663 18.8258 11.5009C18.8258 11.8354 18.7398 12.1644 18.5762 12.4562C18.4125 12.748 18.1767 12.9929 17.8912 13.1674L3.83105 21.7603C3.52427 21.9476 3.17175 22.0466 2.8123 22.0464V22.0464ZM3.20312 3.60488V19.3971L16.1236 11.501L3.20312 3.60488Z\" fill=\"black\"/>\n                </svg>\n                Start\n            </Link>\n        </section>\n\n    );\n};\n\nexport default StartPage;\n","import React from 'react';\nimport {Link, useLocation} from \"react-router-dom\";\nimport P5Wrapper from 'react-p5-wrapper';\nimport s from './Game.module.css'\n\nconst Game = () => {\n    let hash = useLocation().hash?.substring(1);\n    const fieldSize = (!hash || hash > 12 || hash < 3) ? 3 : Number.parseInt(hash);\n\n    const sketch = (p5) => {\n        let fontBold;\n        let cellSize;\n        let fieldWidth;\n        let fieldLeftTop = new Array(2);\n        let map;\n        let score = {\n            'X': 0,\n            'O': 0,\n            'tie': 0,\n        };\n\n        const initMap = () => {\n            map = [];\n            for(let i = 0; i < fieldSize; i++) {\n                map.push(new Array(Number.parseInt(fieldSize)).fill(''));\n            }\n        }\n\n        const getCellSize = () => {\n            const maxWidth = p5.windowWidth * 0.8 < p5.windowHeight * 0.8 ? p5.windowWidth * 0.8 : p5.windowHeight * 0.8;\n            const maxCellSize = 200 * fieldSize < maxWidth ? 200 : Math.floor(maxWidth / fieldSize);\n            return maxCellSize;\n        }\n\n        const drawField = () => {\n            cellSize = getCellSize();\n            fieldWidth = cellSize * fieldSize;\n            fieldLeftTop[0] = (p5.windowWidth / 2 - fieldWidth / 2);\n            fieldLeftTop[1] = (p5.windowHeight - fieldWidth) / 2 < 60 ? 60 : (p5.windowHeight - fieldWidth) / 2;\n\n            p5.push();\n            p5.noStroke();\n            p5.fill(242, 242, 242);\n\n            // vertical lines\n            for (let i = 0; i < fieldSize - 1; i++) {\n                let x = Math.floor(cellSize + i * cellSize + fieldLeftTop[0]);\n                p5.rect(x, fieldLeftTop[1], 5, fieldWidth, 10);\n            }\n\n            // horizontal lines\n            for(let i = 0; i < fieldSize - 1; i++) {\n                let y = Math.floor(cellSize + i * cellSize + fieldLeftTop[1])\n                p5.rect(p5.windowWidth / 2 - fieldWidth / 2, y, fieldWidth, 5, 10);\n            }\n\n            p5.pop();\n        }\n\n        const drawO = (x, y) => {\n            p5.push();\n            p5.stroke(242, 242, 242);\n            p5.strokeWeight(7)\n            p5.noFill();\n            p5.circle(x, y, cellSize * 0.8 - 7);\n            p5.pop();\n        }\n\n        const drawX = (x, y) => {\n            p5.push();\n            p5.rectMode(p5.CENTER);\n            p5.fill(242, 242, 242);\n            p5.angleMode(p5.DEGREES);\n            p5.noStroke();\n            p5.translate(x, y);\n            p5.rotate(45);\n            p5.rect(0, 0, cellSize * 0.8, 7, 10);\n            p5.rotate(-90);\n            p5.rect(0, 0, cellSize * 0.8, 7, 10);\n            p5.pop();\n        }\n\n        const drawMap = () => {\n            for(let i  = 0; i < fieldSize; i++) {\n                for (let j = 0; j < fieldSize; j++) {\n                    if(map[i][j] === 'X') {\n                        drawX(fieldLeftTop[0] + cellSize * j + Math.floor(cellSize / 2),\n                            fieldLeftTop[1] + cellSize * i + Math.floor(cellSize / 2));\n                    } else if (map[i][j] === 'O') {\n                        drawO(fieldLeftTop[0] + cellSize * j + Math.floor(cellSize / 2),\n                            fieldLeftTop[1] + cellSize * i + Math.floor(cellSize / 2));\n                    }\n                }\n            }\n        }\n\n        const drawScore = () => {\n            p5.push();\n            p5.textSize(25);\n            p5.textFont(fontBold);\n            p5.fill(242, 242, 242);\n            p5.text(`Player: ${score.X}`, p5.windowWidth * 0.8, p5.windowHeight * 0.4);\n            p5.text(`Tie: ${score.tie}`, p5.windowWidth * 0.8, p5.windowHeight * 0.428);\n            p5.text(`Computer: ${score.O}`, p5.windowWidth * 0.8, p5.windowHeight * 0.456);\n            p5.pop();\n        };\n\n        const nextTurn = () => {\n            let randomIndex = Math.floor(p5.random(getEmpty()));\n            let counter = -1;\n\n            for (let y = 0; y < fieldSize; y++) {\n                for (let x = 0; x < fieldSize; x++) {\n                    if (map[y][x].length === 0) {\n                        counter++;\n                    }\n                    if (randomIndex === counter) {\n                        map[y][x] = 'O';\n                        return;\n                    }\n                }\n            }\n        }\n\n        const checkWinner = () => {\n            let tmp = [];\n            let winner = null;\n\n            const checkLine = (line) => {\n                if (line.every((elem)=> elem === 'X')) {\n                    score.X += 1;\n                    initMap();\n                    return 'X';\n                }\n                else if (line.every(elem=> elem === 'O')) {\n                    score.O += 1;\n                    initMap();\n                    return 'O';\n                }\n            }\n\n            // horisontal\n            map.forEach((line) => {\n                winner = checkLine(line);\n                if (winner)\n                    return winner;\n            });\n\n            // vertical\n            for (let i = 0; i < fieldSize; i++) {\n                tmp = [];\n                for (let j = 0; j < fieldSize; j++) {\n                    tmp.push(map[j][i]);\n                }\n                winner = checkLine(tmp);\n                if (winner)\n                    return winner;\n            }\n            // diagonal\n            tmp = [];\n            map.forEach((line, i) => {\n                tmp.push(line[i]);\n            });\n            winner = checkLine(tmp);\n            if (winner)\n                return winner;\n\n            tmp = [];\n            map.forEach((line, i) => {\n                tmp.push(line[map.length - 1 - i]);\n            });\n            console.log(tmp);\n            winner = checkLine(tmp);\n            if (winner)\n                return winner;\n        }\n\n        const getEmpty = () => {\n            return map.flat().filter((cell) => cell.length === 0).length;\n        }\n\n        const checkTie = () => {\n            if (getEmpty() === 0) {\n                score.tie += 1;\n                initMap();\n            }\n        };\n\n        p5.preload = () => {\n            fontBold = p5.loadFont('Raleway-Bold.ttf');\n        };\n\n        p5.setup = () => {\n            p5.createCanvas(p5.windowWidth, p5.windowHeight);\n            initMap();\n        };\n\n        p5.draw = () => {\n            p5.background('rgba(0,0,0, 0.95)');\n            drawField();\n            drawMap();\n            drawScore();\n        }\n\n        p5.windowResized = () => {\n            p5.resizeCanvas(p5.windowWidth, p5.windowHeight, false);\n        };\n\n        p5.mouseClicked = () => {\n            if (p5.mouseX >= fieldLeftTop[0] && p5.mouseX <= fieldLeftTop[0] + fieldWidth\n                && p5.mouseY >= fieldLeftTop[1] && p5.mouseY < fieldLeftTop[1] + fieldWidth) {\n                let mapX = Math.floor((p5.mouseX - fieldLeftTop[0]) / cellSize);\n                let mapY = Math.floor((p5.mouseY - fieldLeftTop[1]) / cellSize);\n\n                if(map[mapY][mapX]?.length === 0) {\n                    map[mapY][mapX] = 'X';\n                    if (!checkWinner())\n                        nextTurn();\n                    if (!checkWinner())\n                        checkTie();\n                }\n            }\n        }\n    };\n    return (\n        <P5Wrapper sketch={sketch}>\n            <Link className={s.link} to='/'>Tic-tac-toe</Link>\n        </P5Wrapper>\n    );\n};\n\nexport default Game;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport StartPage from \"../StartPage/StartPage\";\nimport Game from \"../Game/Game\";\nimport './App.css';\n\nexport const GameContext = React.createContext(null);\nfunction App() {\n\n    return (\n        <div className='App'>\n            <Router basename='/tic-tac-toe/'>\n                <Switch>\n                    <Route exact path='/'>\n                        <StartPage />\n                    </Route>\n                    <Route exact path='/game'>\n                        <Game />\n                    </Route>\n                    <Route path='*'>\n                        <Redirect to='/' />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}